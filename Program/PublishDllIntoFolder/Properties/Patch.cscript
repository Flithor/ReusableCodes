using System;using System.IO;using System.Text;public class AppHostPatcher{public static int Patch(string apphostExe,string newPath){try{var dllPath=apphostExe.EndsWith(".exe",StringComparison.OrdinalIgnoreCase)?Path.ChangeExtension(apphostExe,".dll"):apphostExe+".dll";var origPath=Path.GetFileName(dllPath);if(File.Exists(apphostExe)&&origPath!=string.Empty){var origPathBytes=Encoding.UTF8.GetBytes(origPath+"\0");var newPathBytes=Encoding.UTF8.GetBytes(newPath+"\0");if(origPathBytes.Length<=1024&&newPathBytes.Length<=1024){var apphostExeBytes=File.ReadAllBytes(apphostExe);int offset=GetOffset(apphostExeBytes,origPathBytes);if(offset>=0&&offset+newPathBytes.Length<=apphostExeBytes.Length){for(int i=0;i<newPathBytes.Length;i++)apphostExeBytes[offset+i]=newPathBytes[i];File.WriteAllBytes(apphostExe,apphostExeBytes);return 0;}}}return 1;}catch(Exception ex){Console.WriteLine(ex.ToString());return 1;}}static int GetOffset(byte[]bytes,byte[]pattern){var si=0;var b=pattern[0];while(si<bytes.Length){si=Array.IndexOf(bytes,b,si);if(si<0)break;if(Match(bytes,si,pattern))return si;si++;}return-1;}static bool Match(byte[]bytes,int index,byte[]pattern){if(index+pattern.Length>bytes.Length)return false;for(int i=0;i<pattern.Length;i++){if(bytes[index+i]!=pattern[i])return false;}return true;}}
// copy from https://github.com/dnSpy/dnSpy/blob/2fa5c978b1a9fb8d1979c8aa4cfa6d177bf5aa9c/Build/AppHostPatcher/Program.cs
